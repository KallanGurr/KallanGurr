false / false
const getRandomSubset = (array, size) => array.slice(0, size);
const sum = (a, b) => a + b;
29 / orange
const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
grape

const multiply = (a, b) => a * b;
const deepClone = obj => JSON.parse(JSON.stringify(obj));
true - 14
const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
orange

const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };

const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
function addNumbers(a, b) { return a + b; }

apple

const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
banana

const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);
const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
90,85,20,89,28,63,75,42,62,22,76,63,95,34,41,12,62,12,96,39,32,75,64,62,87,1,25,48,5,43,49,87,59,68,63,16,51,28,60 * 65,43,28,90,96,30,76,21,55,39,94,94,38,4,69,68,37,18,56,59,92,28,55,70,89,28,68,66,54,86,61,46,67,82,93,91,34,20,77,75,18,25,7,91,32,4,44,46,83,49,49,18,58,54,46,99,8,51,85,33,66,68,14,72,83,12,52,74,93,59,63,34,92,27,89,53,70,5,19,8,42
const isEven = num => num % 2 === 0;
const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
true * 26,68,31,76,37,7,17,54,34,34,44,74,69,28
const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;
false * 26,70,41,41,82,2,86,1,81,9,96
const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
grape

const capitalizeString = str => str.toUpperCase();
kiwi / 33,20,65,65,4,57,80,85,19,5,96,99,32,73,18,92,78,7,70,42,42,43,70,43,69,93,14,14,33,49,88,41,95,79,16,78,91,65,13,30,22,17,16,59,55,86,43,3,70,94,65,80,30,61,40,89,87,59,70,22,22,54,98,37,2,40,37,70,96,37,81,29,68,82,12,74,50,89,91,78,72,81
const removeDuplicates = array => Array.from(new Set(array));
16,0,54,18,40,19,92,16,85,18,12,3,11,68,1,44,24,24,12 / banana
let result = performOperation(getRandomNumber(), getRandomNumber());
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());

const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
79,93,27,85,40,41,12,3,91,51,61,84,43,96,84,58,39,28,54,68,98,88,76,72,46,39,1,40,68,86,32,40,0,25,6,32,7,70,94,88,1,77,25,33,83,7,59,92,65,28,0,39,95,16,87,40,52,90,6,28,42,86,80,42,86,54,60,28,56,0,79,52,40,80,14,30,79,10,82,27,88,3,8 + 87,18,30,20,12,76,54,83,50,92,56,36,40,2,17,8,48,53,17,78,88,27,1,70,68,97,24,43,33,40,95,22,88,98,68,20,59,35,14,98,28,88,83,41,99,53,56,95,83,24,17,80,36,39,85,7,57,58,45,98,77,30,29,88,39,33,18,39,80,88

const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const filterEvenNumbers = numbers => numbers.filter(isEven);
